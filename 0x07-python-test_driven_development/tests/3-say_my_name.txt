from ``3-say_my_name`` module
=============================

Using ``say_my_name``
---------------------

This is a text file in reStructuredText format.

Importing ``say_my_name`` from ``3-say_my_name`` module:
    >>> say_my_name = __import__("3-say_my_name").say_my_name

Testing for the presence of docstrings in the module:
    >>> m_doc = __import__("3-say_my_name").__doc__
	>>> len(m_doc) > 1
	True

Testing for the presence of docstrings in ``say_my_name`` function:
    >>> f_doc = say_my_name.__doc__
	>>> len(f_doc) > 1
	True

Testing both arguments of type string:
	>>> say_my_name("John", "Smith")
	My name is John Smith

Testing with one argument:
	>>> say_my_name("John")
	My name is John 

Testing the first argument of type float:
	>>> say_my_name(15.5, "John")
	Traceback (most recent call last):
        ...
	TypeError: first_name must be a string

Testing the second argument of type float:
	>>> say_my_name("John", 15.5)
	Traceback (most recent call last):
        ...
	TypeError: last_name must be a string

Testing both arguments with negative numbers:
	>>> say_my_name(-18.5, -1)
	Traceback (most recent call last):
        ...
	TypeError: first_name must be a string

Testing the first argument with None:
	>>> say_my_name(None)
	Traceback (most recent call last):
        ...
	TypeError: first_name must be a string

Testing the second argument with None:
	>>> say_my_name("James", None)
	Traceback (most recent call last):
        ...
	TypeError: last_name must be a string

Testing with type bool:
	>>> say_my_name("John", True)
	Traceback (most recent call last):
        ...
	TypeError: last_name must be a string

Testing with NaN:
	>>> say_my_name(float("nan"))
	Traceback (most recent call last):
        ...
	TypeError: first_name must be a string

Testing with infinity:
	>>> say_my_name(float("inf"))
	Traceback (most recent call last):
        ...
	TypeError: first_name must be a string

Testing with -infinity:
	>>> say_my_name(float("-inf"))
	Traceback (most recent call last):
        ...
	TypeError: first_name must be a string

Testing with list:
	>>> say_my_name([18, 19, 20, 21, 22, 23])
	Traceback (most recent call last):
        ...
	TypeError: first_name must be a string
	
Testing with dict:
	>>> say_my_name("David", {'name': 'Jade', 'age': 22, 'isOnline': True})
	Traceback (most recent call last):
        ...
	TypeError: last_name must be a string
	
Testing with no argument:
	>>> say_my_name()
	Traceback (most recent call last):
        ...
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Testing with more than two arguments:
	>>> say_my_name(5, 6, [88, 90])
	Traceback (most recent call last):
        ...
	TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given
